use chrono::NaiveDateTime;

use crate::import_cpe::MetaType;
use crate::init_db_pool;
use diesel::MysqlConnection;
use nvd_server::error::DBResult;
use nvd_server::modules::cve_exploit_db::CreateCveExploit;
use nvd_server::modules::exploit_db::CreateExploit;
use nvd_server::modules::{CveExploit, Exploit};
use serde::{Deserialize, Serialize};
use std::fs::File;
use std::ops::DerefMut;
use std::path::PathBuf;

mod date_format {
  use chrono::{NaiveDate, NaiveDateTime};
  use serde::{self, Deserialize, Deserializer, Serializer};

  pub(crate) const FORMAT: &str = "%Y-%m-%d";

  pub fn serialize<S>(date: &NaiveDateTime, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let s = date.to_string();
    serializer.serialize_str(&s)
  }

  pub fn deserialize<'de, D>(deserializer: D) -> Result<NaiveDateTime, D::Error>
  where
    D: Deserializer<'de>,
  {
    let s = String::deserialize(deserializer)?;
    if s.is_empty() {
      return Ok(NaiveDateTime::default());
    }
    match NaiveDate::parse_from_str(&s, FORMAT) {
      Ok(naive_datetime) => Ok(naive_datetime.and_hms_opt(0, 0, 0).unwrap_or_default()),
      Err(err) => Err(serde::de::Error::custom(err)),
    }
  }
}

#[derive(Debug, Deserialize, Serialize, Clone)]
struct ExploitDB {
  id: u32,
  file: String,
  description: String,
  #[serde(with = "date_format")]
  date_published: NaiveDateTime,
  author: String,
  r#type: String,
  platform: String,
  port: Option<u16>,
  #[serde(with = "date_format")]
  date_added: NaiveDateTime,
  #[serde(with = "date_format")]
  date_updated: NaiveDateTime,
  verified: u8,
  codes: Option<String>,
  tags: Option<String>,
  aliases: Option<String>,
  screenshot_url: Option<String>,
  application_url: Option<String>,
  source_url: Option<String>,
}
fn import_from_archive(
  connection: &mut MysqlConnection,
  exploit_item: ExploitDB,
  cve_id: Option<String>,
) -> DBResult<Exploit> {
  let meta = MetaType::new();
  let new_exp = CreateExploit {
    id: uuid::Uuid::new_v4().as_bytes().to_vec(),
    name: exploit_item.id.to_string(),
    description: Some(exploit_item.description),
    source: "exploit-db".to_string(),
    path: exploit_item.file,
    meta: serde_json::json!(meta),
    verified: exploit_item.verified,
    created_at: exploit_item.date_published,
    updated_at: exploit_item.date_updated,
  };
  match Exploit::create(connection, &new_exp) {
    Ok(exp) => {
      if let Some(cve_id) = cve_id {
        let new_cve_exp = CreateCveExploit {
          cve_id,
          exploit_id: exp.id.clone(),
        };
        if let Err(err) = CveExploit::create(connection, &new_cve_exp) {
          println!("漏洞利用关联CVE失败：{:?}", err);
        }
      }
      Ok(exp)
    }
    Err(err) => Err(err),
  }
}
pub fn with_archive_exploit(path: PathBuf) {
  let file = File::open(path).unwrap();
  let mut rdr = csv::Reader::from_reader(file);
  let connection_pool = init_db_pool();
  for result in rdr.deserialize() {
    // Notice that we need to provide a type hint for automatic
    // deserialization.
    let record: ExploitDB = result.unwrap();
    if let Some(ref codes) = record.codes {
      let code_list: Vec<String> = codes.split(';').map(|s| s.to_string()).collect();
      for c in code_list {
        if c.starts_with("CVE-") {
          // 是CVE
          if let Err(err) = import_from_archive(
            connection_pool.get().unwrap().deref_mut(),
            record.clone(),
            Some(c),
          ) {
            println!("是CVE： import exploit err: {:?}", err);
            println!("{:?}", record);
          }
        } else {
          // code不为空，但是不是cve
          if let Err(err) = import_from_archive(
            connection_pool.get().unwrap().deref_mut(),
            record.clone(),
            None,
          ) {
            println!("code不为空，但是不是cve： import exploit err: {:?}", err);
          }
        }
      }
    } else {
      // code为空
      if let Err(err) = import_from_archive(
        connection_pool.get().unwrap().deref_mut(),
        record.clone(),
        None,
      ) {
        println!("code为空：import exploit err: {:?}", err);
      }
    }
    // break;
  }
}
