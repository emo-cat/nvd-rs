use crate::component::{EXPRow, ExpProps};
use crate::console_log;
use crate::modules::Paging;
use crate::services::exp::exploit_list;
use crate::services::FetchState;
use nvd_model::exploit::{Exploit, QueryExploit};
use yew::prelude::*;

#[derive(Default)]
pub struct CVEExploitInfoList {
  pub result: Vec<Exploit>,
  pub paging: Paging,
  pub query: QueryExploit,
}

#[derive(PartialEq, Clone, Properties)]
pub struct IDProps {
  pub id: String,
}

pub enum Msg {
  SetFetchState(FetchState<CVEExploitInfoList>),
  Send,
}

impl Component for CVEExploitInfoList {
  type Message = Msg;
  type Properties = IDProps;

  fn create(_ctx: &Context<Self>) -> Self {
    CVEExploitInfoList::default()
  }

  fn update(&mut self, ctx: &Context<Self>, msg: Self::Message) -> bool {
    match msg {
      Msg::SetFetchState(state) => {
        match state {
          FetchState::Success(data) => {
            self.result = data.result;
            return true;
          }
          FetchState::Failed(err) => {
            console_log!("{:?}", err);
          }
        }
        return true;
      }
      Msg::Send => {
        let q = QueryExploit {
          cve: Some(ctx.props().id.clone()),
          ..self.query.clone()
        };
        ctx.link().send_future(async move {
          match exploit_list(q).await {
            Ok(data) => {
              let data = CVEExploitInfoList {
                result: data.result,
                paging: data.paging,
                query: data.query,
              };
              Msg::SetFetchState(FetchState::Success(data))
            }
            Err(err) => Msg::SetFetchState(FetchState::Failed(err)),
          }
        });
      }
    }
    false
  }
  fn view(&self, _ctx: &Context<Self>) -> Html {
    let exploits = self.result.clone();
    if !exploits.is_empty() {
      return html! {
      <div class="table-responsive">
        <table class="table table-vcenter card-table table-striped">
            <thead>
              <tr>
                <th scope="col">{"Name"}</th>
                <th scope="col">{"Source"}</th>
                <th scope="col">{"Verified"}</th>
                <th scope="col">{"Path"}</th>
                <th scope="col">{"Meta"}</th>
                <th scope="col">{"Updated"}</th>
              </tr>
            </thead>
          <tbody>
          {exploits.into_iter().map(|e|{
            let p = ExpProps{props:e.clone()};
            html!{<EXPRow ..p/>}
          }).collect::<Html>()}
          </tbody>
        </table>
      </div>
      };
    }
    html!()
  }
  fn rendered(&mut self, ctx: &Context<Self>, first_render: bool) {
    if first_render {
      ctx.link().send_message(Msg::Send);
    }
  }
}
