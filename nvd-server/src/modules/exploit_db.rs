use crate::error::{DBError, DBResult};
use crate::modules::pagination::ListResponse;
use crate::modules::product_db::QueryProductById;
use crate::modules::{Cve, Exploit, Product, Vendor};
use crate::schema::{cves, exploits, products};
use crate::DB;
use diesel::prelude::*;
use diesel::result::{DatabaseErrorKind, Error as DieselError};
use diesel::{Insertable, MysqlConnection, RunQueryDsl};
use serde::{Deserialize, Serialize};
use serde_json::Value;
#[cfg(feature = "openapi")]
use utoipa::IntoParams;

#[derive(Insertable)]
#[diesel(table_name = exploits)]
pub struct CreateExploit {
  pub id: Vec<u8>,
  pub name: String,
  pub description: Option<String>,
  pub source: String,
  pub path: String,
  pub meta: Value,
  pub verified: u8,
  pub cve_id: String,
  pub product_id: Vec<u8>,
}
#[cfg_attr(feature = "openapi", derive(IntoParams))]
#[derive(Debug, Serialize, Deserialize)]
pub struct QueryExploit {
  pub id: Vec<u8>,
  pub name: String,
  pub description: Option<String>,
  pub source: String,
  pub path: String,
  pub meta: Value,
  pub verified: u8,
  pub cve_id: Option<String>,
  pub vendor: Option<String>,
  pub product: Option<String>,
  pub size: Option<i64>,
  pub page: Option<i64>,
}
impl QueryExploit {
  // 查询参数过滤实现,免得写重复的过滤代码
  // https://github.com/diesel-rs/diesel/discussions/3468
  fn query<'a>(
    &'a self,
    conn: &mut MysqlConnection,
    mut query: exploits::BoxedQuery<'a, DB>,
  ) -> DBResult<exploits::BoxedQuery<'a, DB>> {
    // 如果有提供商名称，查询精准名称，返回该提供商旗下全部产品
    if let Some(vendor_name) = &self.vendor {
      let v = Vendor::query_by_name(conn, vendor_name)?;
      if let Some(product_name) = &self.product {
        let p = Product::query_by_id(
          conn,
          &QueryProductById {
            vendor_id: v.id,
            name: product_name.to_string(),
          },
        )?;
        // 拿到匹配产品ID的全部CVE编号
        query = query.filter(exploits::product_id.eq(p.id));
      } else {
        // 没产品就获取当前供应商的全部产品
        let ids = Product::belonging_to(&v)
          .select(products::id)
          .load::<Vec<u8>>(conn)?;
        query = query.filter(exploits::product_id.eq_any(ids));
      }
    } else {
      // 只有产品的
      if let Some(name) = &self.product {
        let ids = products::table
          .select(products::id)
          .filter(products::name.like(format!("%{name}%")))
          .load::<Vec<u8>>(conn)?;
        query = query.filter(exploits::product_id.eq_any(ids));
      }
    }
    if let Some(id) = &self.cve_id {
      query = query.filter(exploits::cve_id.eq(id));
    }
    Ok(query)
  }
  fn total(&self, conn: &mut MysqlConnection) -> DBResult<i64> {
    let query = self.query(conn, exploits::table.into_boxed())?;
    // 统计查询全部，分页用
    Ok(
      query
        .select(diesel::dsl::count(exploits::cve_id))
        .first::<i64>(conn)?,
    )
  }
}
#[derive(Debug, Serialize, Deserialize)]
pub struct ExploitInfo {
  pub exploit: Exploit,
  pub cve: Option<Cve>,
  pub product: Option<Product>,
}
impl Exploit {
  // 创建漏洞利用
  pub fn create(conn: &mut MysqlConnection, args: &CreateExploit) -> DBResult<Self> {
    if let Err(err) = diesel::insert_into(exploits::table)
      .values(args)
      .execute(conn)
    {
      // 重复了，说明已经存在漏洞利用
      match err {
        DieselError::DatabaseError(DatabaseErrorKind::UniqueViolation, _) => {}
        _ => {
          return Err(DBError::DieselError { source: err });
        }
      }
    }
    // mysql 不支持 get_result，要再查一次得到插入结果
    Ok(
      exploits::dsl::exploits
        .filter(exploits::name.eq(&args.name))
        .filter(exploits::source.eq(&args.source))
        .filter(exploits::path.eq(&args.path))
        .first::<Exploit>(conn)?,
    )
  }
  // 根据供应商，产品和CVE编号 返回CVE和产品信息
  pub fn query(
    conn: &mut MysqlConnection,
    args: &QueryExploit,
  ) -> DBResult<ListResponse<ExploitInfo>> {
    let total = args.total(conn)?;
    // 限制最大分页为20,防止拒绝服务攻击
    let page = args.page.unwrap_or(0);
    let size = std::cmp::min(args.size.to_owned().unwrap_or(10), 10);
    let result = {
      let cve_ids_query = args.query(conn, exploits::table.into_boxed())?;
      let cve_ids = cve_ids_query
        .offset(page * size)
        .limit(size)
        .select(exploits::cve_id)
        .load::<String>(conn)?;
      // 联表查要把表写在前面，但是这样就用不了query了，所以先查处cve编号列表再eq_any过滤
      let query = exploits::table
        .left_join(cves::table)
        .left_join(products::table)
        .into_boxed();
      query
        .filter(exploits::cve_id.eq_any(cve_ids))
        .load::<(Exploit, Option<Cve>, Option<Product>)>(conn)?
        .into_iter()
        .map(|(e, c, p)| ExploitInfo {
          exploit: e,
          cve: c,
          product: p,
        })
        .collect::<Vec<_>>()
    };
    Ok(ListResponse::new(result, total, page, size))
  }
}
